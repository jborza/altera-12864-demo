`timescale 1 ns/ 1 ps
module bcd_incrementer_3_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
reg [11:0] bcd_in;
wire [11:0] bcd_out;

task debug_print;
	input [11:0] expected;
	
	begin
		#10; $display("in = %b [%d], out = %b, expected = %b", bcd_in, bcd_in, bcd_out, expected);
		if(expected != bcd_out) 
		begin 
			$display("^^^ out vs expected is different!");
//			$finish(1); 
		end
	end
endtask
                     
bcd_incrementer_3digit uui (
	.bcd_in(bcd_in),
	.bcd_out(bcd_out),
	.enable(1'b1)
);
initial                                                
begin                                                  
// code that executes only once                                                        
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#1; bcd_in = 12'b000000000000;
debug_print(12'b000000000001);

#1; bcd_in = 12'b000000000001;
debug_print(12'b000000000010);
											 
#1; bcd_in = 12'b000000000010;
debug_print(12'b000000000011);

#1; bcd_in = 12'b000000000011;
 debug_print(12'b000000000100);
 
#1; bcd_in = 12'b000000001000; //8
 debug_print(12'b000000001001); //9
											 
#1; bcd_in = 12'b000000001001; //9
 debug_print(12'b000000010000); //10

#1; bcd_in = 12'b000000010000; //10
 debug_print(12'b000000010001);

#1; bcd_in = 12'b000000010001; //11
 debug_print(12'b000000010010);
 
#1; bcd_in = 12'b000000011001; //19
 debug_print(12'b000000100000); //20

#1; bcd_in = 12'b000010011001; //099
 debug_print(12'b000100000000); //100
 
#1; bcd_in = 12'b000100000100; //104
 debug_print(12'b000100000101); //105
 
#1; bcd_in = 12'b000100001001; //109
 debug_print(12'b000100010000); //110
 
#1; bcd_in = 12'b000100101001; //129
 debug_print(12'b000100110000); //130
 
#1; bcd_in = 12'b000110010000; //190
 debug_print(12'b000110010001); //191
 
 
#1; bcd_in = 12'b000110011001; //199
 debug_print(12'b001000000000); //200
 
#1; bcd_in = 12'b100110011001; //999
 debug_print(12'b000000000000); //000

 

@eachvec;                                              
// --> end                                             
end                                                    
endmodule

