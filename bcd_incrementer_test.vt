`timescale 1 ns/ 1 ps
module bcd_incrementer_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
// wires                                               
reg [3:0] bcd_in;
wire [3:0] bcd_out;
wire carry;

task debug_print;
	input [3:0] expected;
	input carry_expected;
	
	begin
		#10; $display("in = %b [%d], out = %b, carry = %b, expected = %b", bcd_in, bcd_in, bcd_out, carry, expected);
		if(expected != bcd_out || carry != carry_expected) 
		begin 
			$display("^^^ out vs expected is different!");
//			$finish(1); 
		end
	end
endtask
                     
bcd_incrementer uui (
	.bcd_in(bcd_in),
	.bcd_out(bcd_out),
	.enable(1'b1),
	.carry(carry)
);
initial                                                
begin                                                  
// code that executes only once                                                        
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
#1; bcd_in = 4'b0000;
debug_print(4'b0001, 1'b0);

#1; bcd_in = 4'b0001;
debug_print(4'b0010, 1'b0);
											 
#1; bcd_in = 4'b0010;
debug_print(4'b0011, 1'b0);

#1; bcd_in = 4'b0011;
 debug_print(4'b0100, 1'b0);
 
#1; bcd_in = 4'b1000; //8
 debug_print(4'b1001, 1'b0); //9
											 
#1; bcd_in = 4'b1001; //9
 debug_print(4'b0000, 1'b1); //10

@eachvec;                                              
// --> end                                             
end                                                    
endmodule

